GartnerBU<-append(GartnerBU,sapply(oppCats,secondElement))
GartnerBU<-str_trim(GartnerBU)
GartnerBU.table<-table(GartnerBU)
table(GartnerBU)
library(ggplot2)
plot<-ggplot(catByType,aes(x=Type,y=Count))
categoryByType<-table(survey.acct$Improvement.Category,survey.acct$Type)
catByType<-as.data.frame(categoryByType)
n <- c("Category","Type","Count")
names(catByType)<-n
plot<-ggplot(catByType,aes(x=Type,y=Count))
plot+geom_bar(stat = "identity",aes(fill=Category))+ facet_wrap(~Category,ncol=1)+labs(title="Suggestions by Type and Category")+theme(legend.position="none")
load("~/R-projects/GPR/.RData")
install.packages("ProjectTemplate")
??ProjectTemplate
var(samples)
library(truncnorm)
samples<-apply(matrix(round(rtruncnorm(100,a=0,b=45,mean=15,sd=10),0),100000),1,mean)
mean(samples)
var(samples)
samples<-apply(matrix(round(rtruncnorm(100,a=0,mean=15,sd=10),0),100000),1,mean)
mean(samples)
var(samples)
meanmean <- mean(samples)
vmean<-var(samples)
table(samples)
hist(samples)
pnorm(16,meanmean,vmean) - pnorm(14,meanmean,vmean)
pnorm(16,meanmean,sqrt(vmean) - pnorm(14,meanmean,sqrt(vmean)
pnorm(16,meanmean,sqrt(vmean)) - pnorm(14,meanmean,sqrt(vmean))
stmean<-sqrt(vmean)
ppois(10, lambda=lambda)
lambda <- mean*time
ppois(10, lambda=lambda)
modelIwt <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(modelIwt)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
# Give the hat diagonal for the most influential point
fit <- lm(x,y)
fit <- lm(y ~ x)
simmary(fit)
summ(fit)
summary(fit)
fit <- lm(y ~ x)
dfbetas(fit)
hatvalues(fit)
max(hatvalues(fit))
dfbetas(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
dfbetas(fit)[5]
dfbetas(fit)[5,2]
plot(modelIwt)
modelmpg <- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt, mtcars)
modelmpg$coeff
confint(modelmpg)
summary(modelmpg)
2.25e-10
2.25*e-10
summary(modelconf)
modelconf <- lm(mpg ~ as.factor(cyl) + wt, mtcars)
modelmpg <- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt, mtcars)
# modelmpg <- lm(mpg ~ as.factor(cyl)*wt, mtcars)
summary(modelmpg)$coefficients[1,4]
summary(modelconf)$coefficients[1,4]
anova(modelconf,modelmpg)
print(anova(modelconf,modelmpg))
add1(modelmpg)
drop1(modelmpg)
drop1(modelmpg,test="F")
drop1(modelmpg,test="F")
drop1(modelmpg,test="F")[2,5]
drop1(modelmpg,test="F")[2,6]
anova(modelconf,modelmpg)
anova(modelconf,modelmpg)[2,5]
anova(modelconf,modelmpg)[2,6]
power.t.test(n=35,delta=1)
power.t.test(n=35,delta=1,sd=50)
power.t.test(delta=1,sd=50,power=0.9)
power.t.test(delta=0.1,sd=0.5,power=0.9)
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
setwd("~/Projects/Practical Machine Learning/pml")
setwd("~/R-projects/Practical Machine Learning/pml")
#load libraries
library(caret)
library(ggplot2) #redundant - caret loads ggplot2
#load source data
trainRaw <- read.csv("../data/pml-training.csv",header = TRUE)
testRaw <- read.csv("../data/pml-testing.csv",header = TRUE)
#subset data to summary features
trainRawWindow <- trainRaw[trainRaw$new_window=="yes",]
trainRawWindowCo <- trainRawWindow[,grepl("avg|std|min|max|user|class|total",names(trainRawWindow))]
#set up cross-validation sets - split training set into training and testing
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
table(training$user_name,training$classe)
set.seed(1599)
modfit <- train(classe ~ . ,preProcess=c("center","scale"),method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
#predict on train
predResults<-predict(modfit,trainingCarlitos)
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
modfit <- train(classe ~ . -user_name ,preProcess=c("center","scale"),method="rpart",data=training)
warnings()
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
View(training)
trainRawWindowCo <- trainRawWindow[,grepl("min|max|class",names(trainRawWindow))]
#avg|std|min|max|user|class|total
#set up cross-validation sets - split training set into training and testing
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
table(training$user_name,training$classe)
set.seed(1599)
summary(training)
set.seed(1599)
modfit <- train(classe ~ . -user_name ,preProcess=c("center","scale"),method="rpart",data=training)
modfit <- train(classe ~ . ,preProcess=c("center","scale"),method="rpart",data=training)
#modfit <- train(classe ~ . ,preProcess="pca",method="rpart",data=trainingCarlitos)
#testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
#examine model
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
#predict on train
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
predResults<- predict(modfit,testing)
confusionMatrix(predResults,testing$classe)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
#predict on train
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
trainRawWindowCo <- trainRawWindow[,grepl("total|min|max|class",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
predResults<-predict(modfit,training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
trainRawWindowCo <- trainRawWindow[,grepl("^total|min|max|class",names(trainRawWindow))]
View(trainRawWindowCo)
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
summary(training)
modfit <- train(classe ~ . -min_yaw_forearm -max_yaw_forearm,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
#predict on train
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
modfit <- train(classe ~ . -min_yaw_forearm -max_yaw_forearm,method="glm",data=training)
modfit <- train(classe ~ . -min_yaw_forearm -max_yaw_forearm,method="rpart",data=training,preProcess="pca")
View(trainRaw)
qplot(training$min_pitch_forearm)
View(trainRawWindow)
qplot(training$max_roll_belt,training$classe)
qplot(trainRawWindow$avg_roll_belt,trainRawWindow$classe)
qplot(trainRawWindow$total_accel_dumbbell,trainRawWindow$classe)
trainRawWindowCo <- trainRawWindow[,grepl("avg|min|max|class",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . -min_yaw_forearm -max_yaw_forearm,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
#predict on train
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
trainRawWindowCo <- trainRawWindow[,grepl("avg|stddev|class",names(trainRawWindow))]
#avg|std|min|max|user|class|total
#set up cross-validation sets - split training set into training and testing
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
trainRawWindowCo <- trainRawWindow[,grepl("avg|stddev|class|min_roll_fore",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("avg|stddev|class|amp",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
predResults<- predict(modfit,testing)
confusionMatrix(predResults,testing$classe)
trainRawWindowCo <- trainRawWindow[,grepl("class|amp",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("class|ampl",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("class|ampl|stddev",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindow <- trainRaw[trainRaw$new_window=="yes",]
trainRawWindowCo <- trainRawWindow[,grepl("class|ampl|avg",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
qplot(trainRawWindow$max_roll_arm-trainRawWindow$min_roll_arm)
qplot(trainRawWindow$max_roll_arm-trainRawWindow$min_roll_arm,trainRawWindow$classe)
library(plyr)
qplot(trainRawWindow$max_roll_dumbbell-trainRawWindow$min_roll_dumbbell,trainRawWindow$classe)
qplot(mean(trainRawWindow$max_roll_dumbbell-trainRawWindow$min_roll_dumbbell),trainRawWindow$classe)
qplot(training$amplitude_roll_arm,training$classe)
qplot(training$amplitude_roll_arm,training$classe,colour=training$user_name)
trainRawWindowCo <- trainRawWindow[,grepl("class|ampl|avg|user",names(trainRawWindow))]
qplot(training$amplitude_roll_arm,training$classe,colour=training$user_name)
qplot(amplitude_roll_arm,classe,data=training,colour=user_name)
View(training)
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
qplot(amplitude_roll_arm,classe,data=training,colour=user_name)
qplot(amplitude_roll_dumbbell,classe,data=training,colour=user_name)
qplot(amplitude_yaw_dumbbell,classe,data=training,colour=user_name)
qplot(amplitude_pitch_dumbbell,classe,data=training,colour=user_name)
featurePlot(x=training[,c("amplitude_pitch_dumbbell","amplitude_roll_dumbbell","classe")],y=training$user_name,plot="pairs")
trainRawWindowCo <- trainRawWindow[,grepl("class|ampl|avg|user",names(trainRawWindow))]
trainRawWindowCo$ardS <- (trainWindowCo$amplitude_roll_dumbell - mean(trainWindowCo$amplitude_roll_dumbell)/sd(trainWindowCo$amplitude_roll_dumbbell))
trainRawWindowCo$ardS <- (trainRawWindowCo$amplitude_roll_dumbell - mean(trainRawWindowCo$amplitude_roll_dumbell)/sd(trainRawWindowCo$amplitude_roll_dumbbell))
summary(trainRawWindowCo$amplitude_roll_dumbbell)
mean(trainRawWindowCo$amplitude_roll_dumbbell)
sd(trainRawWindowCo$amplitude_roll_dumbbell)
trainRawWindowCo$ardS <- (trainRawWindowCo$amplitude_roll_dumbell - mean(trainRawWindowCo$amplitude_roll_dumbell)/sd(trainRawWindowCo$amplitude_roll_dumbbell)
trainRawWindowCo$ardS <- (trainRawWindowCo$amplitude_roll_dumbell - mean(trainRawWindowCo$amplitude_roll_dumbell))/sd(trainRawWindowCo$amplitude_roll_dumbbell)
(trainRawWindowCo$amplitude_roll_dumbell - mean(trainRawWindowCo$amplitude_roll_dumbell))/sd(trainRawWindowCo$amplitude_roll_dumbbell)
trainRawWindowCo$ardS <- (trainRawWindowCo$amplitude_roll_dumbbell - mean(trainRawWindowCo$amplitude_roll_dumbbell))/sd(trainRawWindowCo$amplitude_roll_dumbbell)
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
qplot(ardS,classe,data=training,colour=user_name)
table(mean(training$ardS),training$classe)
trainRawWindowCo <- trainRawWindow[,grepl("class|avg|user",names(trainRawWindow))]
#avg|std|min|max|user|class|total
trainRawWindowCo$ardS <- (trainRawWindowCo$amplitude_roll_dumbbell - mean(trainRawWindowCo$amplitude_roll_dumbbell))/sd(trainRawWindowCo$amplitude_roll_dumbbell)
#testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
#set up cross-validation sets - split training set into training and testing
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
View(training)
trainRawWindowCo <- trainRawWindow[,grepl("class|variance|user",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
View(training)
trainRawWindowCo <- trainRawWindow[,grepl("class|var|user",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
View(training)
summary(training)
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("class|var|user|forearm",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
View(training)
trainRawWindowCo <- trainRawWindow[,grepl("class|var|stddev|",names(trainRawWindow))]
View(trainRawWindow)
trainRawWindowCo <- trainRawWindow[,grepl("class|var|total",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
View(training)
trainRawWindowCo <- trainRawWindow[,grepl("class|var_pitch|total",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
View(trainRaw)
qplot(amplitude_pitch_dumbbell,classe,data=training,colour=user_name)
trainRawWindowCo <- trainRawWindow[,grepl("class|var_pitch|ampl",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
modfit <- train(classe ~ . ,method="rf",data=training)
trainRawWindowCo <- trainRawWindow[,grepl("class|var",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rf",data=training)
modfit$finalModel
trainRawWindowCo <- trainRawWindow[,grepl("class|var|pitch",names(trainRawWindow))]
View(trainRawWindowCo)
trainRawWindowCo <- trainRawWindow[,grepl("class|var|stddev|avg",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
summary(training)
trainingA <- training[training$classe=="A",]
trainingC <- training[training$class=="C",]
trainingA <- training[training$classe=="A",]
trainingB <- training[training$classe=="B",]
trainingC <- training[training$classe=="C",]
trainingD <- training[training$classe=="D",]
trainingE <- training[training$classe=="E",]
summary(trainingA)
qplot(stddev_pitch_forearm,classe,data=training)
qplot(var_total_acc_belt,classe,data=training)
qplot(var_total_accel_belt,classe,data=training)
qplot(var_accel_forearm,classe,data=training)
modfit <- train(classe ~ var_total_accel_belt + var_accel_forearm ,method="rpart",data=training)
modfit$finalModel
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
qplot(ardS,classe,data=training,colour=user_name)
qplot(avg_pitch_forearm,classe,data=training)
qplot(var_accel_dumbbell,classe,data=training)
qplot(avg_pitch_arm,classe,data=training)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|stddev|avg",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
trainingA <- training[training$classe=="A",]
table(trainingQ$user_name)
table(trainingA$user_name)
table(training$user_name,training$classe)
summary(training)
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|stddev|max|min",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
trainingA <- training[training$classe=="A",]
trainingB <- training[training$classe=="B",]
trainingC <- training[training$classe=="C",]
trainingD <- training[training$classe=="D",]
trainingE <- training[training$classe=="E",]
#table(training$user_name,training$classe)
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
names(trainRaw)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|stddev|max|min|total",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
trainingA <- training[training$classe=="A",]
trainingB <- training[training$classe=="B",]
trainingC <- training[training$classe=="C",]
trainingD <- training[training$classe=="D",]
trainingE <- training[training$classe=="E",]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
modfit <- train(classe ~ . -user_name ,method="rpart",data=training)
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|stddev|max|min|total|amplitude",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
trainingA <- training[training$classe=="A",]
trainingB <- training[training$classe=="B",]
trainingC <- training[training$classe=="C",]
trainingD <- training[training$classe=="D",]
trainingE <- training[training$classe=="E",]
#table(training$user_name,training$classe)
#trainingCarlitos<-training[training$user_name=="carlitos",]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|stddev|max|min|total|amplitude|kurtosis",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
trainingA <- training[training$classe=="A",]
trainingB <- training[training$classe=="B",]
trainingC <- training[training$classe=="C",]
trainingD <- training[training$classe=="D",]
trainingE <- training[training$classe=="E",]
#table(training$user_name,training$classe)
#trainingCarlitos<-training[training$user_name=="carlitos",]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|stddev|total|avg",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
trainingA <- training[training$classe=="A",]
trainingB <- training[training$classe=="B",]
trainingC <- training[training$classe=="C",]
trainingD <- training[training$classe=="D",]
trainingE <- training[training$classe=="E",]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
trainRawWindowCo <- trainRawWindow[,grepl("user|class|var|total|avg",names(trainRawWindow))]
trainIndex = createDataPartition(trainRawWindowCo$classe,p=0.5,list=FALSE)
training = trainRawWindowCo[trainIndex,]
testing = trainRawWindowCo[-trainIndex,]
set.seed(1599)
modfit <- train(classe ~ . ,method="rpart",data=training)
modfit$finalModel
plot(modfit$finalModel, uniform=TRUE,main="Classification Tree", margin=0.2)
text(modfit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
set.seed(1599)
modfit <- train(classe ~ . ,method="rf",data=training)
modfit$finalModel
modfit <- train(classe ~ . ,method="rf",mtry=3,data=training)
modfit <- train(classe ~ . ,method="rf",mtry=4,data=training)
modfit <- train(classe ~ . ,method="rf",mtry=2,data=training)
modfit <- train(classe ~ . ,method="rf(mtry=2)",data=training)
modfit <- train(classe ~ . ,method="rf",data=training,mtry=2)
set.seed(1599)
modfit <- train(classe ~ . ,method="nb",data=training)
modfit$finalModel
predResults<-predict(modfit,training)
confusionMatrix(predResults,training$classe)
